#!/usr/bin/env python3
import re
import subprocess
import sys
import time
import traceback
from multiprocessing.pool import ThreadPool
from typing import Set, List

import requests

"""
USAGE:
./simple_exploit_runner.py <servicename> <exploitfile>
"""

TIMEOUT = 30
DATA_URL = 'https://saarsec:csrcwQaNV0lhWDu9@scoreboard.ctf.saarland/attack.json'
# SUBMITTER_ADDRESS = 'submission.ctf.saarland'
SUBMITTER_ADDRESS = '10.32.250.2'
POOL = ThreadPool()
FLAG_REGEX = re.compile(r'SAAR\{[A-Za-z0-9-_]{32}\}')


def run_attack(exploit: List[str], params: List[str]) -> Set[str]:
    cmd = exploit + params
    if len(exploit) == 1 and exploit[0].endswith('.py'):
        cmd = ['python3', '-u'] + cmd
    try:
        output = subprocess.check_output(cmd, timeout=TIMEOUT)
    except subprocess.CalledProcessError as e:
        print('Process', ' '.join(cmd), 'failed!')
        output = e.output
    output = output.decode('utf-8', errors='ignore')
    return set(FLAG_REGEX.findall(output))


def submit_with_nc(flags: Set[str]):
    flags = '\n'.join(flags) + '\n'
    subprocess.run(['nc', SUBMITTER_ADDRESS, '31337', '-w', '3'], input=flags.encode('utf-8'), timeout=TIMEOUT)


def run_exploit_and_submit(exploit: List[str], servicename: str):
    global POOL
    attack_data = requests.get(DATA_URL).json()
    params = []
    for team in attack_data['teams']:
        p = [team['ip']]
        # build flagid1,flagid1,...   flagid2,flagid2.... parameters, like in CI
        flag_ids = attack_data['flag_ids'].get(servicename, {}).get(team['ip'], {})
        collected_flag_ids = []
        for flag_id in flag_ids.values():
            if isinstance(flag_id, str):
                flag_id = [flag_id]
            while len(collected_flag_ids) < len(flag_ids):
                collected_flag_ids.append([])
            for i in range(len(flag_id)):
                collected_flag_ids[i].append(flag_id[i])
        for flag_id in collected_flag_ids:
            p.append(','.join(flag_id))
        params.append(p)
    results = POOL.imap_unordered(lambda param: run_attack(exploit, param), params)
    flags = set()
    for r in results:
        if r:
            flags.update(r)
    print(f'[*] Collected {len(flags)} flags by {len(params)} exploit invocations')
    if len(flags) > 0:
        submit_with_nc(flags)


if __name__ == '__main__':
    while True:
        try:
            t = time.time()
            run_exploit_and_submit(sys.argv[2:], sys.argv[1])
            t = time.time() - t
            if t < 120:
                print(f'[*] Sleeping {120-t} seconds ...')
                time.sleep(120 - t)
        except KeyboardInterrupt:
            sys.exit(0)
        except:
            traceback.print_exc()
            time.sleep(10)
