import os
import random
import socket
import sys
import time
import traceback

SERVICE_COUNT = 10
EXPLOITING_TEAM_COUNT = 250


def find_flags(service=None):
	flags = []
	dir = '/dev/shm/storage'
	try:
		for fname in os.listdir(dir):
			if not service or ('_'+str(service)+'.txt') in fname:
				with open(dir + '/' + fname, 'r') as f:
					flags.append(f.read())
	except:
		pass
	return ''.join(flags)


def itersplit_into_x_chunks(string, x=10):  # we assume here that x is an int and > 0
	size = len(string)
	chunksize = size // x
	for pos in range(0, size, chunksize):
		yield string[pos:pos + chunksize]


def submit_flags(source_ip, flags):
	try:
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		sock.bind((source_ip, 0))  # -1: don't care about source port number
		sock.connect(('localhost', 31337))
		try:
			for str in itersplit_into_x_chunks(flags.encode('utf-8'), 10000):
				sock.sendall(str)
				sock.recv(4096)
			print('Sent {} characters.'.format(len(flags)))
		finally:
			sock.close()
	except KeyboardInterrupt:
		raise
	except:
		traceback.print_exc()
		time.sleep(5)


if __name__ == '__main__':
	source_ip = sys.argv[1] if len(sys.argv) > 1 else '127.0.71.1'

	if source_ip == 'random':
		flags = find_flags()
		for i in range(10):
			id = random.randint(2, EXPLOITING_TEAM_COUNT) if random.randint(1, 100) <= 98 else 71
			source_ip = '127.{}.{}.1'.format(id//200, id%200)
			print('Submitting for team {} (from {})'.format(id, source_ip))
			submit_flags(source_ip, flags)
	elif source_ip == 'repeat':
		while True:
			print('Go!')
			flags = find_flags(random.randint(1, SERVICE_COUNT))
			for i in range(10):
				id = random.randint(2, EXPLOITING_TEAM_COUNT) if random.randint(1, 1000) <= 990 else 71
				source_ip = '127.{}.{}.1'.format(id//200, id%200)
				print('Submitting for team {} (from {})'.format(id, source_ip))
				t = time.time()
				submit_flags(source_ip, flags)
				num_flags = len(flags) / 43
				submit_time = time.time() - t
				print('{} flags, {} seconds => {:.1f} flags/second'.format(int(num_flags), int(submit_time), num_flags/submit_time))
			print('Waiting for next round...')
			time.sleep(random.randint(15, 30))
	else:
		flags = find_flags()
		print('Found flags.')
		submit_flags(source_ip, flags)
